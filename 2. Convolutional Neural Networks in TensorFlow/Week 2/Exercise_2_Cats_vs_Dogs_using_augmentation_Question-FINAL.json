{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dn-6c02VmqiN"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "# In this exercise you will train a CNN on the FULL Cats-v-dogs dataset\n",
    "# This will require you doing a lot of data preprocessing because\n",
    "# the dataset isn't split into training and validation for you\n",
    "# This code block has all the required inputs\n",
    "import os\n",
    "import zipfile\n",
    "import random\n",
    "import shutil\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from shutil import copyfile\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3sd9dQWa23aj"
   },
   "outputs": [],
   "source": [
    "# This code block unzips the full Cats-v-Dogs dataset to /tmp\n",
    "# which will create a tmp/PetImages directory containing subdirectories\n",
    "# called 'Cat' and 'Dog' (that's how the original researchers structured it)\n",
    "path_cats_and_dogs = f\"{getcwd()}/../tmp2/cats-and-dogs.zip\"\n",
    "shutil.rmtree('/tmp')\n",
    "\n",
    "local_zip = path_cats_and_dogs\n",
    "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
    "zip_ref.extractall('/tmp')\n",
    "zip_ref.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gi3yD62a6X3S"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1500\n",
      "1500\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/PetImages/Cat/')))\n",
    "print(len(os.listdir('/tmp/PetImages/Dog/')))\n",
    "\n",
    "# Expected Output:\n",
    "# 1500\n",
    "# 1500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "F-QkLjxpmyK2"
   },
   "outputs": [],
   "source": [
    "# Use os.mkdir to create your directories\n",
    "# You will need a directory for cats-v-dogs, and subdirectories for training\n",
    "# and testing. These in turn will need subdirectories for 'cats' and 'dogs'\n",
    "try:\n",
    "    os.mkdir('/tmp/cats-v-dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/dogs')\n",
    "except OSError:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zvSODo0f9LaU"
   },
   "outputs": [],
   "source": [
    "# Write a python function called split_data which takes\n",
    "# a SOURCE directory containing the files\n",
    "# a TRAINING directory that a portion of the files will be copied to\n",
    "# a TESTING directory that a portion of the files will be copie to\n",
    "# a SPLIT SIZE to determine the portion\n",
    "# The files should also be randomized, so that the training set is a random\n",
    "# X% of the files, and the test set is the remaining files\n",
    "# SO, for example, if SOURCE is PetImages/Cat, and SPLIT SIZE is .9\n",
    "# Then 90% of the images in PetImages/Cat will be copied to the TRAINING dir\n",
    "# and 10% of the images will be copied to the TESTING dir\n",
    "# Also -- All images should be checked, and if they have a zero file length,\n",
    "# they will not be copied over\n",
    "#\n",
    "# os.listdir(DIRECTORY) gives you a listing of the contents of that directory\n",
    "# os.path.getsize(PATH) gives you the size of the file\n",
    "# copyfile(source, destination) copies a file from source to destination\n",
    "# random.sample(list, len(list)) shuffles a list\n",
    "def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n",
    "    files = []\n",
    "    for filename in os.listdir(SOURCE):\n",
    "        file = SOURCE + filename\n",
    "        if os.path.getsize(file) > 0:\n",
    "            files.append(filename)\n",
    "        else:\n",
    "            print(filename + \" is zero length, so ignoring\")\n",
    "    \n",
    "    training_length = int(len(files) * SPLIT_SIZE)\n",
    "    testing_length = int(len(files) - training_length)\n",
    "    shuffled_set = random.sample(files, len(files))\n",
    "    training_set = shuffled_set[0:training_length]\n",
    "    testing_set = shuffled_set[training_length:]\n",
    "    \n",
    "    for filename in training_set:\n",
    "        this_file = SOURCE + filename\n",
    "        destination = TRAINING + filename\n",
    "        copyfile(this_file, destination)\n",
    "    for filename in testing_set:\n",
    "        this_file = SOURCE + filename\n",
    "        destination = TESTING + filename\n",
    "        copyfile(this_file, destination)\n",
    "\n",
    "CAT_SOURCE_DIR = \"/tmp/PetImages/Cat/\"\n",
    "TRAINING_CATS_DIR = \"/tmp/cats-v-dogs/training/cats/\"\n",
    "TESTING_CATS_DIR = \"/tmp/cats-v-dogs/testing/cats/\"\n",
    "DOG_SOURCE_DIR = \"/tmp/PetImages/Dog/\"\n",
    "TRAINING_DOGS_DIR = \"/tmp/cats-v-dogs/training/dogs/\"\n",
    "TESTING_DOGS_DIR = \"/tmp/cats-v-dogs/testing/dogs/\"\n",
    "\n",
    "split_size = .9\n",
    "split_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)\n",
    "split_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "luthalB76ufC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1350\n",
      "1350\n",
      "150\n",
      "150\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/cats-v-dogs/training/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/training/dogs/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/dogs/')))\n",
    "\n",
    "# Expected output:\n",
    "# 1350\n",
    "# 1350\n",
    "# 150\n",
    "# 150"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-BQrav4anTmj"
   },
   "outputs": [],
   "source": [
    "# DEFINE A KERAS MODEL TO CLASSIFY CATS V DOGS\n",
    "# USE AT LEAST 3 CONVOLUTION LAYERS\n",
    "model = tf.keras.models.Sequential([\n",
    "# YOUR CODE HERE\n",
    "    tf.keras.layers.Conv2D(16, (3,3), activation = 'relu', input_shape = (150, 150, 3)),\n",
    "    tf.keras.layers.MaxPooling2D(2,2),\n",
    "    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2,2),\n",
    "    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2,2),\n",
    "    tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(512, activation = 'relu'),\n",
    "    tf.keras.layers.Dense(1, activation = 'sigmoid')\n",
    "])\n",
    "\n",
    "model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOTE:\n",
    "\n",
    "In the cell below you **MUST** use a batch size of 10 (`batch_size=10`) for the `train_generator` and the `validation_generator`. Using a batch size greater than 10 will exceed memory limits on the Coursera platform."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mlNjoJ5D61N6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2700 images belonging to 2 classes.\n",
      "Found 300 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "TRAINING_DIR = \"/tmp/cats-v-dogs/training\"\n",
    "train_datagen = ImageDataGenerator(\n",
    "      rescale=1./255,\n",
    "      rotation_range=40,\n",
    "      width_shift_range=0.2,\n",
    "      height_shift_range=0.2,\n",
    "      shear_range=0.2,\n",
    "      zoom_range=0.2,\n",
    "      horizontal_flip=True,\n",
    "      fill_mode='nearest')\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n",
    "                                                    batch_size=10,\n",
    "                                                    class_mode='binary',\n",
    "                                                    target_size=(150, 150))\n",
    "\n",
    "VALIDATION_DIR = \"/tmp/cats-v-dogs/testing\"\n",
    "validation_datagen = ImageDataGenerator(\n",
    "      rescale=1./255,\n",
    "      rotation_range=40,\n",
    "      width_shift_range=0.2,\n",
    "      height_shift_range=0.2,\n",
    "      shear_range=0.2,\n",
    "      zoom_range=0.2,\n",
    "      horizontal_flip=True,\n",
    "      fill_mode='nearest')\n",
    "\n",
    "validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,\n",
    "                                                         batch_size=10,\n",
    "                                                         class_mode  = 'binary',\n",
    "                                                         target_size = (150, 150))\n",
    "\n",
    "\n",
    "# Expected Output:\n",
    "# Found 2700 images belonging to 2 classes.\n",
    "# Found 300 images belonging to 2 classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KyS4n53w7DxC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "270/270 [==============================] - 56s 209ms/step - loss: 0.6526 - acc: 0.6330 - val_loss: 0.6316 - val_acc: 0.6167\n",
      "Epoch 2/2\n",
      "270/270 [==============================] - 55s 205ms/step - loss: 0.6346 - acc: 0.6370 - val_loss: 0.6077 - val_acc: 0.6900\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_generator,\n",
    "                              epochs=2,\n",
    "                              verbose=1,\n",
    "                              validation_data=validation_generator)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MWZrJN4-65RC"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Training and validation loss')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PLOT LOSS AND ACCURACY\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.image  as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#-----------------------------------------------------------\n",
    "# Retrieve a list of list results on training and test data\n",
    "# sets for each training epoch\n",
    "#-----------------------------------------------------------\n",
    "acc=history.history['acc']\n",
    "val_acc=history.history['val_acc']\n",
    "loss=history.history['loss']\n",
    "val_loss=history.history['val_loss']\n",
    "\n",
    "epochs=range(len(acc)) # Get number of epochs\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation accuracy per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, acc, 'r', \"Training Accuracy\")\n",
    "plt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.figure()\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation loss per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, loss, 'r', \"Training Loss\")\n",
    "plt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n",
    "\n",
    "\n",
    "plt.title('Training and validation loss')\n",
    "\n",
    "# Desired output. Charts with training and validation metrics. No crash :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Exercise 6 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "uAPOR",
   "launcher_item_id": "e9lTb"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
